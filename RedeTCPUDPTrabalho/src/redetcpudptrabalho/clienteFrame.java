/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redetcpudptrabalho;

import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;

/**
 *
 * @author Usuario
 */
public class clienteFrame extends javax.swing.JFrame implements Observer{
    File fileBuffer = null;
    JFileChooser fcBuffer = null;
    int portaValor = 5963;
    boolean portaLock = false;
    boolean globalLock = false;
    boolean threadControlLock = false;
    volatile boolean threadInterruptFlag = false;
    boolean usarTCP = true;
    int retransmissoes = 0;
    int retransmissoesBuffer = 0;
    ArrayList<UDPDataEstatistica> udpArray = new ArrayList<>();
    /**
     * Creates new form NovoJFrame
     */
    public clienteFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btSelecionarArquivo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbArquivoNome = new javax.swing.JLabel();
        tbBaixar = new javax.swing.JToggleButton();
        pConfig = new javax.swing.JPanel();
        tbTransporte = new javax.swing.JToggleButton();
        tfPorta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfIP = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfRepeticoes = new javax.swing.JTextField();
        lbInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        btSelecionarArquivo.setText("Selecionar Pasta");
        btSelecionarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecionarArquivoActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Arquivo :");

        lbArquivoNome.setText("NULL");
        lbArquivoNome.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(lbArquivoNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbArquivoNome, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        tbBaixar.setBackground(new java.awt.Color(255, 255, 255));
        tbBaixar.setText("Baixar Arquivo");
        tbBaixar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBaixarActionPerformed(evt);
            }
        });

        tbTransporte.setText("TCP");
        tbTransporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbTransporteActionPerformed(evt);
            }
        });

        tfPorta.setText("5963");
        tfPorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPortaActionPerformed(evt);
            }
        });
        tfPorta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPortaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPortaKeyReleased(evt);
            }
        });

        jLabel3.setText("Porta :");

        jLabel4.setText("IP :");

        tfIP.setText("localhost");
        tfIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfIPActionPerformed(evt);
            }
        });
        tfIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfIPKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfIPKeyReleased(evt);
            }
        });

        jLabel5.setText("Repetições : ");

        tfRepeticoes.setText("1");

        javax.swing.GroupLayout pConfigLayout = new javax.swing.GroupLayout(pConfig);
        pConfig.setLayout(pConfigLayout);
        pConfigLayout.setHorizontalGroup(
            pConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pConfigLayout.createSequentialGroup()
                .addComponent(tbTransporte, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 167, Short.MAX_VALUE))
            .addGroup(pConfigLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(pConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pConfigLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfRepeticoes))
                    .addGroup(pConfigLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPorta))
                    .addGroup(pConfigLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfIP)))
                .addContainerGap())
        );
        pConfigLayout.setVerticalGroup(
            pConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pConfigLayout.createSequentialGroup()
                .addComponent(tbTransporte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(9, 9, 9)
                .addGroup(pConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(tfRepeticoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        lbInfo.setText("Nao conectado");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btSelecionarArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tbBaixar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btSelecionarArquivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbBaixar)
                    .addComponent(lbInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limparGui(){
        lbArquivoNome.setText("NULL");
    }
    
    private void btSelecionarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecionarArquivoActionPerformed
        // TODO add your handling code here:
        this.setVisible(true);

        if (fcBuffer==null)
        {
            fcBuffer = new JFileChooser();
            fcBuffer.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }
        
        int returnVal = fcBuffer.showOpenDialog(this);
        
        try{
            if (returnVal == JFileChooser.APPROVE_OPTION)
            {
                fileBuffer = fcBuffer.getSelectedFile();
                lbArquivoNome.setText(fileBuffer.getName());
            }
            else
            {
                
            }
        }
        catch( Exception e)
        {
            e.printStackTrace();
        }
        System.out.println("end");
    }//GEN-LAST:event_btSelecionarArquivoActionPerformed

    private void tfPortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPortaActionPerformed
        // TODO add your handling code here:
        if (portaLock){
            return;
        }
        try{
            portaLock = true;
            int novaPorta = Integer.parseInt(tfPorta.getText());
            portaValor = novaPorta;
        }catch(Exception e){
            tfPorta.setText(Integer.toString(portaValor));
        }finally{
            portaLock = false;
        }
    }//GEN-LAST:event_tfPortaActionPerformed

    private void tfPortaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPortaKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_tfPortaKeyPressed

    private void tfPortaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPortaKeyReleased
        // TODO add your handling code here:
        if (portaLock){
            return;
        }
        try{
            portaLock = true;
            if (tfPorta.getText().equals("")){
                tfPorta.setText("0");
            }
            int novaPorta = Integer.parseInt(tfPorta.getText());
            portaValor = novaPorta;
        }catch(Exception e){
            tfPorta.setText(Integer.toString(portaValor));
        }finally{
            portaLock = false;
        }
    }//GEN-LAST:event_tfPortaKeyReleased

    private void iniciarConexaoServidor(){
        lbInfo.setText("Downloading...");
        conexThread thread = new conexThread(usarTCP);
        thread.addObserver(this);
        java.awt.EventQueue.invokeLater(thread);
    }
    
    private void mudarEstadoDeInterface(){
        boolean decisor = tbBaixar.isSelected();
        globalLock = decisor;
        tbBaixar.setEnabled(!decisor);
        btSelecionarArquivo.setEnabled(!decisor);
        tfIP.setEditable(!decisor);
        tfPorta.setEditable(!decisor);
        if (decisor){
            tbBaixar.setText("Downloading");
            iniciarConexaoServidor();
        }else{
            tbBaixar.setText("Baixar Arquivo");
        }
    }
    
    private void tbBaixarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBaixarActionPerformed
        // TODO add your handling code here:
        boolean erro = false;
        try{
            if (!(fileBuffer==null)){
                int repeticoes = Integer.parseInt(tfRepeticoes.getText());
                if (repeticoes>0){
                    this.retransmissoes = repeticoes;
                    this.retransmissoesBuffer = repeticoes;
                    mudarEstadoDeInterface();
                }else{
                    lbInfo.setText("campo de texto repeticoes deve ser maior que zero");
                    tfRepeticoes.setText("1");
                    erro = true;
                }
            }else{
                lbInfo.setText("Erro!, pasta nao selecionada!");
                
            }
        }catch(NumberFormatException e){
            lbInfo.setText("Erro, campo de texto repeticoes invalido!");
            tfRepeticoes.setText("1");
            erro = true;
        }finally{
            if (erro){
                tbBaixar.setSelected(false);
            }
        }
    }//GEN-LAST:event_tbBaixarActionPerformed

    private void tfIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfIPActionPerformed

    private void tfIPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIPKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfIPKeyPressed

    private void tfIPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIPKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tfIPKeyReleased

    private void tbTransporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbTransporteActionPerformed
        // TODO add your handling code here:
        usarTCP = !(tbTransporte.isSelected());
        if (usarTCP){
            tbTransporte.setText("TCP");
            tfPorta.setEditable(true);
            tfPorta.setBackground(Color.WHITE);
        }else{
            tbTransporte.setText("UDP");
            tfPorta.setEditable(false);
            tfPorta.setBackground(Color.BLACK);
        }
    }//GEN-LAST:event_tbTransporteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new clienteFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSelecionarArquivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbArquivoNome;
    private javax.swing.JLabel lbInfo;
    private javax.swing.JPanel pConfig;
    private javax.swing.JToggleButton tbBaixar;
    private javax.swing.JToggleButton tbTransporte;
    private javax.swing.JTextField tfIP;
    private javax.swing.JTextField tfPorta;
    private javax.swing.JTextField tfRepeticoes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof ArrayList){
            ArrayList array = (ArrayList)arg;
            String primeiraMsg = (String)array.get(0);
            if (primeiraMsg.equals("fimudp")){
                boolean sucessoDownload = (boolean)array.get(1);
                if (sucessoDownload){
                    double tempo = (double)array.get(2);
                    double retrans = (double)array.get(3);
                    UDPDataEstatistica newData = new UDPDataEstatistica(tempo, retrans);
                    udpArray.add(newData);
                    retransmissoes = retransmissoes-1;
                    if (retransmissoes<=0){
                        double[] datas = UDPDataEstatistica.gerarMedidas(udpArray);
                        double mediatempo = datas[0];
                        double mediaRetrans = datas[1];
                        double desvioPRetrans = datas[3];
                        double nivelDeConfiancaRetrans = 1.96*desvioPRetrans/(Math.sqrt(retransmissoesBuffer));
                        double erroMaximo = 0.00;
                        if (mediaRetrans >= 0.00000001){
                            erroMaximo = 100.0*(nivelDeConfiancaRetrans/mediaRetrans);
                        }
                        System.out.println("media tempo : " + String.format("%.8f", mediatempo) + " seg\nMedia retransmissao : " + String.format("%.8f %%", mediaRetrans) + "\nDesvio retransmissao : " + String.format("%.8f", desvioPRetrans) + "\nIntervalo de confiança retransmissao: " + String.format("%.8f",mediaRetrans) + "+/- " + String.format("%.8f",nivelDeConfiancaRetrans) + ",Erro maximo : " + String.format("%.8f",erroMaximo) + "%");
                        if (erroMaximo >= 10){
                            double numeroDeExperimentos = Math.pow(((1.96*desvioPRetrans)/(0.1*mediaRetrans)),2);
                            numeroDeExperimentos = Math.ceil(numeroDeExperimentos);
                            System.out.println("Numero de repeticoes necessarias : " + String.format("%.0f repeticoes",numeroDeExperimentos));
                        }
                        tbBaixar.setSelected(false);
                        mudarEstadoDeInterface();
                        retransmissoes = 0;
                        udpArray = new ArrayList<>();
                    }else{
                        iniciarConexaoServidor();
                    }
                }else{
                    tbBaixar.setSelected(false);
                    mudarEstadoDeInterface();
                    retransmissoes = 0;
                    udpArray = new ArrayList<>();
                }
            }else if(primeiraMsg.equals("fimtcp")){
                boolean sucessoDownload = (boolean)array.get(1);
                if (sucessoDownload){
                    double tempo = (double)array.get(2);
                    UDPDataEstatistica newData = new UDPDataEstatistica(tempo, 0.0);
                    udpArray.add(newData);
                    retransmissoes = retransmissoes-1;
                    if (retransmissoes<=0){
                        double[] datas = UDPDataEstatistica.gerarMedidas(udpArray);
                        double mediatempo = datas[0];
                        System.out.println("media tempo : " + String.format("%.8f", mediatempo));
                        tbBaixar.setSelected(false);
                        mudarEstadoDeInterface();
                        retransmissoes = 0;
                        udpArray = new ArrayList<>();
                    }else{
                        System.out.println("Tempo : " + String.format("%.8f", tempo));
                        iniciarConexaoServidor();
                    }
                }else{
                    tbBaixar.setSelected(false);
                    mudarEstadoDeInterface();
                    retransmissoes = 0;
                    udpArray = new ArrayList<>();
                }
            }else{
                lbInfo.setText("Erro notificação de observable!");
            }
        }else{
            throw new IllegalArgumentException("Esperava-se tipo String!");
        }
    }
    
    class conexThread extends Observable implements Runnable{
        boolean conexaoTCP = true;
        
        public conexThread(boolean ehTCP){
            conexaoTCP = ehTCP;
        }
        
        @Override
        public void run(){
            ArrayList<Object> arg = new ArrayList<>();
            try{
                if (conexaoTCP){
                    arg.add("fimtcp");
                    ConexaoTCP conex = new ConexaoTCP();
                    boolean ocorreuErro = false;
                    try{
                        Object ret = conex.solicitarPedido(tfIP.getText(), portaValor, fileBuffer, threadInterruptFlag);
                        if (ret instanceof Double){
                            Double retorno = (Double)ret;
                            if (!(retorno==null)){
                                arg.add(true);
                                arg.add(retorno);
                            }else{
                                arg.add(false);
                            }
                        }
                    }catch(Exception e){
                        lbInfo.setText("Erro!");
                        e.printStackTrace();
                        ocorreuErro = true;
                    }finally{
                        threadControlLock = false;
                        if (!ocorreuErro){
                            lbInfo.setText("Download concluido!");
                        }
                    }
                    threadControlLock = true;
                }else{
                    arg.add("fimudp");
                    ConexaoUDP conex = new ConexaoUDP();
                    boolean ocorreuErro = false;
                    try{
                        Object ret = conex.solicitarPedido(tfIP.getText(), fileBuffer, threadInterruptFlag);
                        if (ret instanceof Integer){
                            arg.add(false);
                            Integer resposta = (Integer)ret;
                            if(resposta==-1){//timeout
                                lbInfo.setText("Timeout!");
                                ocorreuErro = true;
                            }else{
                                lbInfo.setText("Erro!");//outroerro
                                ocorreuErro = true;
                            }
                        }else{//retorno arraylist
                            arg.add(true);
                            ArrayList resposta = (ArrayList)ret;
                            arg.add(resposta.get(0));
                            arg.add(resposta.get(1));
                        }
                    }catch(Exception e){
                        e.printStackTrace();
                    }finally{
                        threadControlLock = false;
                        if (!ocorreuErro){
                            lbInfo.setText("Download concluido!");
                        }   
                    }   
                    threadControlLock = true;
                }
            }catch(Exception e){
                lbInfo.setText("Erro!(2)");
            }finally{
                setChanged();
                notifyObservers(arg);
            }
        }
    }
}
